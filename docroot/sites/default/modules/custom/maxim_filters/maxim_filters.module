<?php

/**
 * Implements hook_field_formatter_info().
 */
function maxim_filters_field_formatter_info() {
  return array(
    'maxim_video_player' => array(
      'label' => t('Maxim Video Player'),
      'field types' => array('file', 'brightcove_field'),
      'settings' => array(
          'video_autoplay' => TRUE,
          'include_og' => TRUE,
          'video_volume' => 75,
          'video_width' => 620,
          'video_height' => 348,
          'brightcove_player' => 1,
        ),
    ),
    'comma_separated_list' => array(
      'label' => t('Comma Separated List'),
      'field types' => array('taxonomy_term_reference'),
    ),
    'comma_sep_list_w_and' => array(
      'label' => t('Comma Separated List with "and"'),
      'field types' => array('taxonomy_term_reference'),
    ),
    'embedded_slideshow' => array(
      'label' => t('Embed related slideshow'),
      'field types' => array('node_reference'),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function maxim_filters_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = '';
  $brightcove_player = '';
  // Brightcove player
  if ($instance['field_name'] == 'field_brightcove_video') {
    $brightcove_player = ',<br />Brightcove player: ' . brightcove_player_load($settings['brightcove_player'])->name;
  }
  if ($display['type'] == 'maxim_video_player') {
    $summary = t('Autoplay: @auto, OG Tags: @og, Volume: @vol%, Dimensions @width x @height' . $brightcove_player,
      array(
        '@auto' => $settings['video_autoplay'] ? 'On' : 'Off',
        '@vol' => $settings['video_volume'],
        '@og' => $settings['include_og'] ? 'On' : 'Off',
        '@width' => $settings['video_width'],
        '@height' => $settings['video_height'],
        ));
  }
  return $summary;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function maxim_filters_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();
  if ($display['type'] == 'maxim_video_player') {
    $element['video_autoplay'] = array(
      '#title' => t('Autoplay'),
      '#type' => 'checkbox',
      '#tree' => TRUE,
      '#default_value' => $settings['video_autoplay'],
    );
    $element['include_og'] = array(
      '#title' => t('Include OG Tags'),
      '#type' => 'checkbox',
      '#tree' => TRUE,
      '#default_value' => $settings['include_og'],
    );
    $element['video_volume'] = array(
      '#title' => t('Volume'),
      '#type' => 'textfield',
      '#default_value' => $settings['video_volume'],
      '#size' => 3,
      '#maxlength' => 3,
      '#element_validate' => array('maxim_filters_volume_validate'),
      '#required' => TRUE,
      '#description' => t('Set to 0 for mute.'),
    );
    $element['video_width'] = array(
      '#title' => t('Width'),
      '#type' => 'textfield',
      '#default_value' => $settings['video_width'],
      '#size' => 4,
      '#maxlength' => 4,
      '#element_validate' => array('_element_validate_integer_positive'),
      '#required' => TRUE,
    );
    $element['video_height'] = array(
      '#title' => t('Height'),
      '#type' => 'textfield',
      '#default_value' => $settings['video_height'],
      '#size' => 4,
      '#maxlength' => 4,
      '#element_validate' => array('_element_validate_integer_positive'),
      '#required' => TRUE,
    );
    if ($instance['field_name'] == 'field_brightcove_video') {
      $element['brightcove_player'] = array(
        '#type' => 'select',
        '#title' => t('Brightcove Player'),
        '#default_value' => isset($settings['brightcove_player']) ?
          $settings['brightcove_player'] : NULL,
        '#options' => brightcove_player_list(),
        '#description' => t('Select the Brightcove player.'),
      );
    }
  }
  return $element;
}

function maxim_filters_volume_validate($element, &$form_state) {
  $value = $element['#value'];
  if (($value !== '' && (!is_numeric($value) || intval($value) != $value)) || $value < 0 || $value > 100) {
    form_error($element, t('%name must be an integer between 0 and 100.', array('%name' => $element['#title'])));
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function maxim_filters_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $og_element = array();
  $settings = $display['settings'];
  switch ($display['type']) {
    case 'comma_separated_list':
      $term_list = array();
      foreach ($items as $delta => $item) {
        $term_list[] = taxonomy_term_load($item['tid'])->name;
      }
      if (count($term_list) > 0) {
        $element[$delta]['#markup'] = implode(', ', $term_list);
      }
    break;
    case 'comma_sep_list_w_and':
      $strList = '';
      $preAnchor = '';
      $postAnchor =  '';
      $ct = 0;
      foreach ($items as $delta => $item) {
        $term = taxonomy_term_load($item['tid']);
        $term_name = $term->name;
        $term_vid = $term->vid;
        //check for vocabulary ID 5 which is content_authors. if so, then add the google authorship link around eaach author name
        if ($term_vid == 5) {
          $preAnchor = '<a href="https://plus.google.com/109577250522656249315?rel=author" target="_blank">';
          $postAnchor =  '</a>';
        }
        else {
          $preAnchor = '';
          $postAnchor =  '';
        }
        $ct++;
        if ($ct == 1) {
          $strList .= $preAnchor . $term_name . $postAnchor;
        }
        else if (count($items) > 2) {
          $strList .= ', ' . $preAnchor . $term_name . $postAnchor;
        }
        else if (count($items) == 2 && $ct == 2) {
          $strList .= ' and ' . $preAnchor . $term_name . $postAnchor;
        }
      }
      if (strlen($strList)) {
        $element[$delta]['#markup'] = $strList;
      }
    break;
    case 'maxim_video_player':
      $include_og = ($settings['include_og'] ? TRUE : FALSE);
      $width = $settings['video_width'];
      $height = $settings['video_height'];
      // check field type
      switch ($field['type']) {
        case 'brightcove_field':
          $default_video_url = 'http://link.brightcove.com/services/player/bcpid2112050740001?bckey=AQ~~,AAABnwxt8sE~,TdyFq09iMr6x0d00YioZLsi7N-bYqK_y';
          foreach ($items as $delta => $item) {
            // Use brightcove field formater view
            $display['type'] = 'default';
            // Brightcove uses different display width/height names
            $display['settings']['width'] = $width;
            $display['settings']['height'] = $height;
            $element = brightcove_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display);
            $og_video_url = $default_video_url . '&bctid=' . $item['brightcove_id'];
          }
        break;
        default:
          // Default 5 min video
          // Common case: each value is displayed individually in a sub-element
          // keyed by delta. The field.tpl.php template specifies the markup
          // wrapping each value.
          foreach ($items as $delta => $item) {
            if(!empty($item['field_media_5min_id'][LANGUAGE_NONE]['0']['value'])) {
              //print 5min player script as well as the current node 5min ID value
              $element[$delta]['#markup'] = "<script type=\"text/javascript\" src=\"http://pshared.5min.com/Scripts/PlayerSeed.js?sid=764&amp;width={$width}&amp;height={$height}&amp;volume={$volume}&amp;shuffle=0&amp;sequential=1&amp;autoStart={$autoplay}&amp;playList="
                  . $item['field_media_5min_id'][LANGUAGE_NONE]['0']['value'] . '"></script>';
              $og_video_url = 'http://embed.5min.com/' . $item['field_media_5min_id'][LANGUAGE_NONE]['0']['value'] . '/&sid=764&vcdBgColor=%23313131&colorPallet=%23ED1C24&playerActions=696&isAutoStart=true';
            }
            elseif (!empty($item['field_media_cdn_url'][LANGUAGE_NONE]['0']['value'])) {
            //print the legacy flash player with a direct hardcode to the generic video stub and flv cdn file path
              $element[$delta]['#markup'] = "<object width=\"{$width}\" height=\"{$height}\" volume=\"{$volume}\" id=\"FiveminPlayer\" classid=\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\">
                <param name=\"allowfullscreen\" value=\"true\" /><param name=\"allowScriptAccess\" value=\"always\" />
                <param name=\"movie\" value=\"http://embed.5min.com/399695185/&sid=764&isAutoStart=true\" /><param name=\"flashvars\" value=\"tpvVideoUrl="
                . $item['field_media_cdn_url'][LANGUAGE_NONE]['0']['value'] . '" /><param name="wmode" value="window" />
                <embed name="FiveminPlayer" src="http://embed.5min.com/399695185/&sid=764&isAutoStart=true&tpvVideoUrl='
                . $item['field_media_cdn_url'][LANGUAGE_NONE]['0']['value'] . "\" type=\"application/x-shockwave-flash\" width=\"{$width}\" height=\"{$height}\" volume=\"{$volume}\" allowfullscreen=\"true\" allowScriptAccess=\"always\" wmode=\"window\" ></embed ></object>";
            }
            else {
              $element[$delta]['#markup'] = t('Error: Video Not Found');
            }
          }
        break;
      }
      // Include OG tags
      if($include_og && isset($og_video_url)) {
        $og_element = array(
          '#tag' => 'meta', // The #tag is the html tag - <meta />
          '#attributes' => array( // Set up an array of attributes inside the tag
          'property' => 'og:type',
          'content' => 'video',
          ),
        );
        drupal_add_html_head($og_element, 'maximmeta_og:type');
        $og_element = array(
          '#tag' => 'meta', // The #tag is the html tag - <meta />
          '#attributes' => array( // Set up an array of attributes inside the tag
          'property' => 'og:video',
          'content' => $og_video_url,
          ),
        );
        drupal_add_html_head($og_element, 'maximmeta_og:video');
        $og_element = array(
          '#tag' => 'meta', // The #tag is the html tag - <meta />
          '#attributes' => array( // Set up an array of attributes inside the tag
          'property' => 'og:video:type',
          'content' => 'application/x-shockwave-flash',
          ),
        );
        drupal_add_html_head($og_element, 'maximmeta_og:video_type');
        $og_element = array(
          '#tag' => 'meta', // The #tag is the html tag - <meta />
          '#attributes' => array( // Set up an array of attributes inside the tag
          'property' => 'og:video:width',
          'content' => $width,
          ),
        );
        drupal_add_html_head($og_element, 'maximmeta_og:video_width');
        $og_element = array(
          '#tag' => 'meta', // The #tag is the html tag - <meta />
          '#attributes' => array( // Set up an array of attributes inside the tag
          'property' => 'og:video:height',
          'content' => $height,
          ),
        );
        drupal_add_html_head($og_element, 'maximmeta_og:video_height');
      }

    break;
    case 'embedded_slideshow':
      include_once libraries_get_path('php').'/shared/preprocess-functions.php';

      if(count($items)>0){
        $items = array($items[0]);
      }

       foreach ($items as $delta => $item) {

        $ss_view_name = 'slideshow_json';
        $ss_display = 'slideshow_hth_profile';

        $element[$delta]['#markup'] = '<div class="gallery anythingSlider"><div class="wrapper"><ul></ul></div></div><div id="slideshowBody" style="margin-top:15px"></div>';

        $view_result = views_embed_view($ss_view_name, $ss_display, $item['nid']);

        $json_data = '';
        if (strlen($view_result)) {
          preg_match('/\<div class\=[\"]{0,1}view-content[\"]{0,1}\>(.*?)\<\/div\>/s', $view_result, $slideshow_data);
          $json_data = json_decode(trim($slideshow_data[1]), TRUE);

          $ss_lib_path = libraries_get_path('slideshow');
          drupal_add_js(libraries_get_path('slideshow') . '/flowplayer-3.2.9.min.js');
          drupal_add_js(libraries_get_path('slideshow') . '/flowplayer.ipad-3.2.9.min.js');
          drupal_add_js($ss_lib_path.'/jquery.anythingslider.js');
          drupal_add_js($ss_lib_path.'/jquery.easing.1.2.js');
          drupal_add_js(libraries_get_path('slideshow').'/hammer.js');
          drupal_add_js($ss_lib_path.'/slideshow_display.js');
          drupal_add_js(libraries_get_path('slideshow').'/jquery.hammer.js');
          drupal_add_css($ss_lib_path.'/slider.css');

          drupal_add_js(array('Maxim' => array('hottie' => array('hottie_position' => 0))), 'setting');

          for($i = 0; $i < count($json_data); $i++) {
            $json_data[$i]['type'] = determine_media_types(pathinfo($json_data[$i]['src'], PATHINFO_EXTENSION));
            $json_data[$i]['src'] = replace_image_paths($json_data[$i]['src'], 'ss_main');
            $json_data[$i]['thumb'] = replace_image_paths($json_data[$i]['thumb'], 'ss_carousel');
            $json_data[$i]['slide_title'] = '';
            $json_data[$i]['alt'] = trim($json_data[$i]['alt']);
            if (strlen($json_data[$i]['alt'])) {
              $json_data[$i]['alt_image'] = remove_all_quotes($json_data[$i]['alt']);
            }
            elseif (strlen($json_data[$i]['ssTitle'])) {
              $json_data[$i]['alt_image'] = remove_all_quotes($json_data[$i]['ssTitle']);
            }
            else {
              $json_data[$i]['alt_image'] = '';
            }

            $json_data[$i]['title_image'] = '';

            $json_data[$i]['attribution'] = trim($json_data[$i]['attribution']);
            if (strlen($json_data[$i]['attribution'])) {
              if ($json_data[$i]['attribution'][strlen($json_data[$i]['attribution'])-1] == '|') {
                $json_data[$i]['attribution'] = substr($json_data[$i]['attribution'], 0, -1);
              }
            }
          }

          $js = <<<EOD
            // On Document load
            jQuery(function () {
              loadSlideShowImages();
              galleryLink = slideshow[0].galleryLink.toLowerCase();
              jQuery(".anythingSlider").parent().prepend("<div id='fullscreenLink'><a href='" + replaceChannelPath(slideshow[0].fullscreenLink) + "'><img class='fullScreenLink' src='/sites/default/libraries/slideshow/images/icon_fullscreen.gif' />FULL SCREEN</a></div><div class='clear-both'>&nbsp;</div>");
            });
EOD;
          drupal_add_js("var slideshow=".str_replace("'", '&apos;', json_encode($json_data)).';', 'inline');
          drupal_add_js($js, 'inline');
        }
       }
  }

  return $element;
}

/*
 * Determine the media file type based on file extension.
 */
function determine_media_types($file_extension) {
  $image_types = array('jpg', 'png', 'gif', 'jpeg');
  $video_types = array('flv', 'mp4');

  if (in_array(strtolower($file_extension), $image_types)) {
    return ('image');
  }
  elseif (in_array(strtolower($file_extension), $video_types)) {
    return ('video');
  }
}

/*
 * Replace local file paths with CDN path.
 */
function replace_image_paths($file, $style_type = '', $replace_local_images = true, $is_image_gallery = false) {
  //image styling paths
  if ((determine_media_types(pathinfo($file, PATHINFO_EXTENSION)) === 'image') || ( $is_image_gallery === true)) {
    if ($style_type == 'ss_prev_next') {
      $file = str_replace('/default/files/', '/default/files/styles/thumbnail_medium/public/', $file);
    }
    elseif ($style_type == 'ss_carousel') {
      $file = str_replace('/default/files/', '/default/files/styles/carousel_icon/public/', $file);
    }
    elseif ($style_type == 'ss_carousel_watermark') {
      $file = str_replace('/default/files/', '/default/files/styles/carousel_wmark_main/public/', $file);
    }
    elseif ($style_type == 'ss_main') {
      $file = str_replace('/default/files/', '/default/files/styles/carousel_main/public/', $file);
    }
    elseif ($style_type == 'ss_gallery') {
      $file = str_replace('/default/files/', '/default/files/styles/thumbnail_gallery/public/', $file);
    }
    elseif ($style_type == 'ss_blackout_main') {
      $file = str_replace('/default/files/', '/default/files/styles/slideshow_large/public/', $file);
    }
    elseif ($style_type == 'ss_watermark') {
      $file = str_replace('/default/files/', '/default/files/styles/carousel_wmark_main/public/', $file);
    }
  }
  return($file);
}

function remove_quotes($string) {
  return (str_replace(array('"', "'"), '', $string));
}
