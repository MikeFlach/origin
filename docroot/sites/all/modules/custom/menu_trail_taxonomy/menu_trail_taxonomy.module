<?php
/**
 * @file
 * Take local pathauto alias path and set active-trail based on its taxononomy
 * 
 * eg. if current page is foo/bar/zee 
 * foo & foo/bar menu items are set as active-trail and expanded
 */

/**
 * Implement hook_init
 */
function menu_trail_taxonomy_init() {
	
	// Check for Drupal 7.9 +
	if (!function_exists('menu_tree_set_path')) {
		drupal_set_message('<strong>Menu Trail By Path</strong> module requires Drupal 7.9 or better. Please update your Drupal core','warning');
		return;
	}
  _get_parent_candidates(drupal_get_path_alias());
  // Don't even bother if current page is root
  //if (empty($parent_candidates)) {
  //  return;
  //}
 
}

/**
 * Implements hook_permission().
 */
function menu_trail_taxonomy_permission() {
  return array(
    'administer menu_trail_taxonomy' => array(
      'title' => t('Administer Menu Trail Taxonomy settings'),
    ),
  );
}

/**
 * Implement hook_menu().
 */
function menu_trail_taxonomy_menu() {
  $items = array();
  $items['admin/structure/menu_trail_taxonomy'] = array(
    'title' => 'Menu trail by path',
    'description' => 'Configure menu trail taxonomy module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('menu_trail_taxonomy_form'),
    'access arguments' => array('administer menu_trail_taxonomy'),
    'type' => MENU_NORMAL_ITEM,
  );
 return $items;
}

/**
 * Form builder; Create and display the admin configuration settings form.
 */
function menu_trail_taxonomy_form($form, &$form_state) {
  
  $form['menu_trail_taxonomy_breadcrumb_handling'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable breadcrumb handling'),
    '#description' => t("If checked, Menu Trail Taxonomy will take over breadcrumb handling."),
		'#default_value' => variable_get('menu_trail_taxonomy_breadcrumb_handling', TRUE),
  );

 return system_settings_form($form);
}


/**
 * Return an array of parent candidates
 * e.g. for path 'foo/bar/zee' 
 * return array of internal drupal paths for 'foo', 'foo/bar', 'foo/bar/zee'
 */
function _get_parent_candidates($path = NULL) {
  if (!isset($path)) {
    $path = request_path();
  }
  $pieces = explode('/', $path);
  $path = '';

  foreach ($pieces as $piece) {
    $path .= $piece . '/';
    $internal_path = drupal_get_normal_path(rtrim($path, '/'));
    $nodepos = strpos($internal_path,'node');
    $taxpos = strpos($internal_path,'taxonomy');

    if ($nodepos !== false) {
      
      $arnid = explode('/', $internal_path);
      $nid = array_pop($arnid);
      $query = db_select('field_data_field_channel', 'c');
      $query->leftJoin('node', 'n', 'n.nid = c.entity_id');
      $qryResults = $query->fields('c', array('field_channel_tid'))
      ->condition('n.nid', $nid)
      ->execute();
      foreach ($qryResults as $record){
        $internal_path = 'taxonomy/term/' . $record->field_channel_tid;
        $parent_candidates[] = $internal_path;
        menu_tree_set_path('main-menu', $internal_path);
      }
      
    }

    /*if (($nodepos === false) && ($taxpos === false)) {
      
      $query = new EntityFieldQuery;
      $result = $query
      ->entityCondition('entity_type', 'taxonomy_term')
      ->propertyCondition('name', $piece)
      ->propertyCondition('vid', 1)
      ->execute();   
      //kpr($result);
      if (!empty($result)) {
        $tid_item = array_shift($result['taxonomy_term']);
        $internal_path = 'taxonomy/term/' . $tid_item->tid;
      }
    }*/
    
  }

  //return $parent_candidates;
}

/**
 * Below is mattfarina's fix for core bug /942782
 */

/**
 * Implements hook_menu_insert().
 */
function menu_trail_taxonomy_menu_insert($menu) {
  _custom_menu_active_trail_add($menu);
}

/**
 * Implements hook_menu_update().
 */
function menu_trail_taxonomy_menu_update($menu) {
  _custom_menu_active_trail_add($menu);
}

/**
 * Implements hook_menu_delete().
 */
function menu_trail_taxonomy_menu_delete($menu) {
  $active_menus = variable_get('menu_default_active_menus', array_keys(menu_list_system_menus()));
  if (in_array($menu['menu_name'], $active_menus)) {
    $key = array_search($menu['menu_name'], $active_menus);
    unset($active_menus[$key]);
    variable_set('menu_default_active_menus', $active_menus);
  }
}

/**
 * Add a custom menu to the active trail.
 * 
 * @param array $menu
 *   A menu item to add to the active trail.
 */
function _custom_menu_active_trail_add($menu) {
  // Make sure the menu is present in the active menus variable so that its
  // items may appear in the menu active trail.
  // @see menu_set_active_menu_names()
  $active_menus = variable_get('menu_default_active_menus', array_keys(menu_list_system_menus()));
  if (!in_array($menu['menu_name'], $active_menus)) {
    $active_menus[] = $menu['menu_name'];
    variable_set('menu_default_active_menus', $active_menus);
  }
}
